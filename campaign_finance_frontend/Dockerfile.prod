# ─────────────────────────────────────────────────────────────────────────────
# Step 1: Build Nuxt App
# ─────────────────────────────────────────────────────────────────────────────
FROM node:22-alpine AS build

# Add build argument for API_URL and set it as an environment variable
ARG API_URL
ENV API_URL=${API_URL}
ARG IAPClientIdPublic
ENV IAPClientIdPublic = ${IAPClientIdPublic}
ARG NODE_ENV
ENV NODE_ENV = ${NODE_ENV}

# Install packages needed for building
RUN apk update && apk add --no-cache \
    build-base \
    git \
    openssh-client \
    ffmpeg \
    gnupg \
    ca-certificates

# Create and switch to the /app directory
WORKDIR /app

# Enable Corepack (for Yarn)
RUN corepack enable

# Copy package files first (for Docker caching)
COPY package.json yarn.lock ./

# Use node_modules linker
RUN yarn config set nodeLinker node-modules

# Install dependencies in immutable mode
RUN yarn install --immutable

# Copy all project files
COPY . .

# Build the Nuxt app (this will use the API_URL from the environment)
RUN yarn build

# ─────────────────────────────────────────────────────────────────────────────
# Step 2: Create a lightweight runtime container
# ─────────────────────────────────────────────────────────────────────────────
FROM node:22-alpine

# (Optional) Install CA certificates in the runtime container
RUN apk add --no-cache ca-certificates && update-ca-certificates

# Create and switch to the /app directory
WORKDIR /app

# Only copy the build output from the "build" stage
COPY --from=build /app/.output/ /app/

# Set environment variables for runtime
ENV PORT=8080
ENV HOST=0.0.0.0

# Expose the production port
EXPOSE 8080

# Start the Nuxt server
CMD ["node", "/app/server/index.mjs"]
